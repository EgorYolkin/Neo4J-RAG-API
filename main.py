#!/usr/bin/env python3
"""
Neo4j RAG System - Main Entry Point
"""

from neo4jrag.config import Config
from neo4jrag.services.neo4j.neo4j_connector import Neo4jConnector
from neo4jrag.services.ollama.ollama_loader import OllamaLoader
from neo4jrag.services.neo4j.graph_builder import GraphBuilder
from neo4jrag.services.neo4j.vector_store import VectorStore
from neo4jrag.services.ollama.rag_pipeline import RAGPipeline
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫ Neo4j RAG System\n")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Config.from_env()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j
    connector = Neo4jConnector(
        uri=config.neo4j.uri,
        username=config.neo4j.username,
        password=config.neo4j.password,
        database=config.neo4j.database
    )
    connector.connect()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ Ollama
    ollama = OllamaLoader(
        base_url=config.ollama.base_url,
        model=config.ollama.model,
        embedding_model=config.ollama.embedding_model,
        temperature=config.ollama.temperature
    )
    ollama.load_llm()
    ollama.load_embeddings()
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
    print("\nüìö –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–Ω–∞–Ω–∏–π...")
    builder = GraphBuilder(
        connector=connector,
        chunk_size=config.rag.chunk_size,
        chunk_overlap=config.rag.chunk_overlap
    )
    builder.setup_schema()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    sample_docs = [
        {
            "id": "doc_ml",
            "title": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "content": """
            –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–∑—É—á–∞–µ—Ç –º–µ—Ç–æ–¥—ã 
            –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –æ–±—É—á–∞—Ç—å—Å—è. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –æ–±—É—á–µ–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç: 
            –æ–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º, –æ–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è –∏ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º.
            
            –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –û–Ω–∏ —Å–æ—Å—Ç–æ—è—Ç 
            –∏–∑ —Å–ª–æ—ë–≤ –Ω–µ–π—Ä–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤—ã—è–≤–ª—è—é—Ç —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.
            """
        },
        {
            "id": "doc_graphdb",
            "title": "–ì—Ä–∞—Ñ–æ–≤—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "content": """
            –ì—Ä–∞—Ñ–æ–≤—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫–∏–µ –∫–∞–∫ Neo4j, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ 
            —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É–∑–ª—ã –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ —Ä—ë–±—Ä–∞ –¥–ª—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –Ω–∏–º–∏.
            
            RAG (Retrieval-Augmented Generation) ‚Äî —ç—Ç–æ –ø–æ–¥—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ 
            —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é. GraphRAG —Ä–∞—Å—à–∏—Ä—è–µ—Ç 
            —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥—Ä–∞—Ñ–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
            """
        }
    ]
    
    for doc in sample_docs:
        builder.add_document(
            doc_id=doc["id"],
            title=doc["title"],
            content=doc["content"]
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    print("\nüîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    vector_store = VectorStore(
        connector=connector,
        ollama=ollama,
        index_name=config.rag.vector_index_name,
        dimensions=config.rag.embedding_dimension
    )
    vector_store.create_vector_index()
    vector_store.generate_embeddings()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
    print("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    rag = RAGPipeline(vector_store=vector_store, ollama=ollama)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞—Ñ–∞:")
    stats = connector.get_statistics()
    for node_type, count in stats.get("nodes", {}).items():
        print(f"  {node_type}: {count}")
    for rel_type, count in stats.get("relationships", {}).items():
        print(f"  {rel_type}: {count}")
    
    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!\n")
    
    # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    rag.ask("–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?")
    rag.ask("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ GraphRAG")
    rag.ask("–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏?")
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connector.close()
    print("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()
